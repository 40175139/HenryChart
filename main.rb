#require 'bundler/setup'
require 'sinatra'
require 'octokit'
require 'dotenv/load' # Manages environment variables
require 'json'
require 'thin'
require 'openssl'     # Verifies the webhook signature
require 'jwt'         # Authenticates a GitHub App
require 'time'        # Gets ISO 8601 representation of a Time object -> maybe not valid gem
require 'logger'      # Logs debug statements
require 'slim'        # Template language (HTML,...)
require 'sinatra/reloader'
require 'sinatra/flash'

set :port, 3000 # change to 3000 or 1024
set :bind, '0.0.0.0'

class HenryChart < Sinatra::Application

  # Converts the newlines. Expects that the private key has been set as an
  # environment variable in PEM format.
  PRIVATE_KEY = OpenSSL::PKey::RSA.new(ENV['GITHUB_PRIVATE_KEY'].gsub('\n', "\n"))

  # Your registered app must have a secret set. The secret is used to verify
  # that webhooks are sent by GitHub.
  WEBHOOK_SECRET = ENV['GITHUB_WEBHOOK_SECRET']

  # The GitHub App's identifier (type integer) set when registering an app.
  APP_IDENTIFIER = ENV['GITHUB_APP_IDENTIFIER']

  # Turn on Sinatra's verbose logging during development
  configure :development do
    set :logging, Logger::DEBUG
  end


  # Executed before each request to the `/event_handler` route
  before '/event_handler' do
    get_payload_request(request)
    verify_webhook_signature
    authenticate_app
    # Authenticate the app installation in order to run API operations
    authenticate_installation(@payload)
  end


  post '/event_handler' do

    case request.env['HTTP_X_GITHUB_EVENT']
    when 'issues'
      if @payload['action'] === 'opened'
        handle_issue_opened_event(@payload)
      end
    end

    200 # success status
  end


  helpers do

    # When an issue is opened, add a label
    def handle_issue_opened_event(payload)
      repo = payload['repository']['full_name']
      issue_number = payload['issue']['number']
      @installation_client.add_labels_to_an_issue(repo, issue_number, ['needs-response'])
    end

    # Saves the raw payload and converts the payload to JSON format
    def get_payload_request(request)
      # request.body is an IO or StringIO object
      # Rewind in case someone already read it
      request.body.rewind
      # The raw text of the body is required for webhook signature verification
      @payload_raw = request.body.read
      begin
        @payload = JSON.parse @payload_raw
      rescue => e
        fail  "Invalid JSON (#{e}): #{@payload_raw}"
      end
    end

    # Instantiate an Octokit client authenticated as a GitHub App.
    # GitHub App authentication requires that you construct a
    # JWT (https://jwt.io/introduction/) signed with the app's private key,
    # so GitHub can be sure that it came from the app and was not altered by
    # a malicious third party.
    def authenticate_app
      payload = {
          # The time that this JWT was issued, _i.e._ now.
          iat: Time.now.to_i,

          # JWT expiration time (10 minute maximum)
          exp: Time.now.to_i + (10 * 60),

          # Your GitHub App's identifier number
          iss: APP_IDENTIFIER
      }

      # Cryptographically sign the JWT.
      jwt = JWT.encode(payload, PRIVATE_KEY, 'RS256')

      # Create the Octokit client, using the JWT as the auth token.
      @app_client ||= Octokit::Client.new(bearer_token: jwt)
    end

    # Instantiate an Octokit client, authenticated as an installation of a
    # GitHub App, to run API operations.
    def authenticate_installation(payload)
      @installation_id = payload['installation']['id']
      @installation_token = @app_client.create_app_installation_access_token(@installation_id)[:token]
      @installation_client = Octokit::Client.new(bearer_token: @installation_token)
    end

    # Check X-Hub-Signature to confirm that this webhook was generated by
    # GitHub, and not a malicious third party.
    #
    # GitHub uses the WEBHOOK_SECRET, registered to the GitHub App, to
    # create the hash signature sent in the `X-HUB-Signature` header of each
    # webhook. This code computes the expected hash signature and compares it to
    # the signature sent in the `X-HUB-Signature` header. If they don't match,
    # this request is an attack, and you should reject it. GitHub uses the HMAC
    # hexdigest to compute the signature. The `X-HUB-Signature` looks something
    # like this: "sha1=123456".
    # See https://developer.github.com/webhooks/securing/ for details.
    def verify_webhook_signature
      their_signature_header = request.env['HTTP_X_HUB_SIGNATURE'] || 'sha1='
      method, their_digest = their_signature_header.split('=')
      our_digest = OpenSSL::HMAC.hexdigest(method, WEBHOOK_SECRET, @payload_raw)
      halt 401 unless their_digest == our_digest

      # The X-GITHUB-EVENT header provides the name of the event.
      # The action value indicates the which action triggered the event.
      logger.debug "---- received event #{request.env['HTTP_X_GITHUB_EVENT']}"
      logger.debug "----    action #{@payload['action']}" unless @payload['action'].nil?
    end

  end

  ######################################################################
  get '/hello' do
    "I am Henry Chart"
    t = Time.new
    t.inspect

  end

  get '/' do
    @title = "Home"
    @tasks = [
        {
            name: "task 1",
            resources: "Mel",
            start_date: Date.parse("01/04/2020"),
            end_date: Date.parse("05/04/2020")
        },
        {
            name: "task 2",
            resources: "Alex",
            start_date: Date.parse("02/04/2020"),
            end_date: Date.parse("06/04/2020")
        },
        {
            name: "task 3",
            resources: "John",
            start_date: Date.parse("05/04/2020"),
            end_date: Date.parse("10/04/2020")
        }
    ]

    date_from = Date.parse("01/04/2020")
    date_to = Date.parse("30/04/2020")
    @days = []
    while date_from <= date_to do
      @days.append(date_from)
      date_from = date_from + 1
    end

    slim :home
  end

  post '/' do
    @title = "Home"
    date_from = Date.parse(params[:dateFrom])
    date_to = Date.parse(params[:dateTo])
    days = date_to - date_from
    "Duration of your project is " "#{days.to_i}" " days."
  end

  get '/test' do
    @title = "Test"

    #@cal_array = [1, 2, 3, 4, 5]
    #@cal_array_length = @cal_array[2]
    #@cal_array.each do
    #@user = [1, 2, 3, 4, 5]




    slim :test
  end

  get '/adhoc' do
    @title = "Ad Hoc"

    t = Time.new
    #t.inspect
    @t = t.inspect

    slim :adhoc
  end

  post '/adhoc' do
    flash[:notice] = "You said '#{params[:message]}'."
    redirect '/'
  end

  configure do
    set :sessions, true
    set :slim, pretty: true
  end






  # Finally some logic to let us run this server directly from the command line,
  # or with Rack. Don't worry too much about this code. But, for the curious:
  # $0 is the executed file
  # __FILE__ is the current file
  # If they are the sameâ€”that is, we are running this file directly, call the
  # Sinatra run method
  run! if __FILE__ == $0
end


